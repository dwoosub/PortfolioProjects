create or replace dynamic table DW_CP.PUBLIC.NEW_USER_RETENTION(
	AGGREGATED_AT,
	NETWORK,
	BRAND_ID,
	SITE_ID,
	GP_ID,
	COUNTRY_ID,
	GAME_TYPE,
	IS_NEW_USER_FOR_GAME,
	DAY1_RETENTION_FROM_AGGREGATED_AT,
	DAY2_RETENTION_FROM_AGGREGATED_AT,
	DAY3_RETENTION_FROM_AGGREGATED_AT,
	DAY7_RETENTION_FROM_AGGREGATED_AT,
	DAY14_RETENTION_FROM_AGGREGATED_AT,
	DAY30_RETENTION_FROM_AGGREGATED_AT
) target_lag = '1 hour' refresh_mode = AUTO initialize = ON_SCHEDULE warehouse = DT_CP_WH
 as

WITH first_time_per_game AS (
    -- Find the first time each user played each game type
    SELECT 
        GP_ID,
        GAME_TYPE,
        MIN(AGGREGATED_AT) AS FIRST_GAME_PLAY
    FROM DW_WAREHOUSE.PUBLIC.gp_statistics_game_casino
    GROUP BY GP_ID, GAME_TYPE
)

SELECT
    t1.AGGREGATED_AT,
    t1.NETWORK,
    t1.BRAND_ID,
    t1.SITE_ID,
    t1.GP_ID,
    t1.COUNTRY_ID,
    t1.GAME_TYPE,

    -- Identify if this is the user's first time playing this specific game
    CASE 
        WHEN t1.AGGREGATED_AT = f.FIRST_GAME_PLAY THEN TRUE 
        ELSE FALSE 
    END AS IS_NEW_USER_FOR_GAME,

    CASE WHEN t2.GP_ID IS NOT NULL THEN TRUE ELSE FALSE END 
        AS DAY1_RETENTION_FROM_AGGREGATED_AT,
    CASE WHEN t3.GP_ID IS NOT NULL THEN TRUE ELSE FALSE END 
        AS DAY2_RETENTION_FROM_AGGREGATED_AT,
    CASE WHEN t4.GP_ID IS NOT NULL THEN TRUE ELSE FALSE END 
        AS DAY3_RETENTION_FROM_AGGREGATED_AT,
    CASE WHEN t5.GP_ID IS NOT NULL THEN TRUE ELSE FALSE END 
        AS DAY7_RETENTION_FROM_AGGREGATED_AT,
    CASE WHEN t6.GP_ID IS NOT NULL THEN TRUE ELSE FALSE END 
        AS DAY14_RETENTION_FROM_AGGREGATED_AT,
    CASE WHEN t7.GP_ID IS NOT NULL THEN TRUE ELSE FALSE END 
        AS DAY30_RETENTION_FROM_AGGREGATED_AT    

FROM DW_WAREHOUSE.PUBLIC.gp_statistics_game_casino AS t1

-- Join to first-time users per game type
INNER JOIN first_time_per_game AS f 
    ON t1.GP_ID = f.GP_ID 
    AND t1.GAME_TYPE = f.GAME_TYPE 
    AND t1.AGGREGATED_AT = f.FIRST_GAME_PLAY

-- Retention: Check if they returned to the same game later
LEFT JOIN DW_WAREHOUSE.PUBLIC.gp_statistics_game_casino AS t2 
    ON t1.NETWORK = t2.NETWORK 
    AND t1.GP_ID = t2.GP_ID 
    AND t1.GAME_TYPE = t2.GAME_TYPE 
    AND t2.AGGREGATED_AT = DATEADD(day, 1, t1.AGGREGATED_AT)

LEFT JOIN DW_WAREHOUSE.PUBLIC.gp_statistics_game_casino AS t3 
    ON t1.NETWORK = t3.NETWORK 
    AND t1.GP_ID = t3.GP_ID 
    AND t1.GAME_TYPE = t3.GAME_TYPE 
    AND t3.AGGREGATED_AT = DATEADD(day, 2, t1.AGGREGATED_AT)

LEFT JOIN DW_WAREHOUSE.PUBLIC.gp_statistics_game_casino AS t4 
    ON t1.NETWORK = t4.NETWORK 
    AND t1.GP_ID = t4.GP_ID 
    AND t1.GAME_TYPE = t4.GAME_TYPE 
    AND t4.AGGREGATED_AT = DATEADD(day, 3, t1.AGGREGATED_AT)

LEFT JOIN DW_WAREHOUSE.PUBLIC.gp_statistics_game_casino AS t5 
    ON t1.NETWORK = t5.NETWORK 
    AND t1.GP_ID = t5.GP_ID 
    AND t1.GAME_TYPE = t5.GAME_TYPE 
    AND t5.AGGREGATED_AT = DATEADD(day, 7, t1.AGGREGATED_AT)

LEFT JOIN DW_WAREHOUSE.PUBLIC.gp_statistics_game_casino AS t6 
    ON t1.NETWORK = t6.NETWORK 
    AND t1.GP_ID = t6.GP_ID 
    AND t1.GAME_TYPE = t6.GAME_TYPE 
    AND t6.AGGREGATED_AT = DATEADD(day, 14, t1.AGGREGATED_AT)

LEFT JOIN DW_WAREHOUSE.PUBLIC.gp_statistics_game_casino AS t7 
    ON t1.NETWORK = t7.NETWORK 
    AND t1.GP_ID = t7.GP_ID 
    AND t1.GAME_TYPE = t7.GAME_TYPE 
    AND t7.AGGREGATED_AT = DATEADD(day, 30, t1.AGGREGATED_AT);